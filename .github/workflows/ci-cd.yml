name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  API_GATEWAY_IMAGE: ${{ env.REGISTRY }}/sparkfund/api-gateway
  INVESTMENT_SERVICE_IMAGE: ${{ env.REGISTRY }}/sparkfund/investment-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: |
        go mod download
        
    - name: Run unit tests
      run: |
        go test -v ./...
        
    - name: Run security tests
      run: |
        go test -v ./tests/security/...
        
    - name: Run integration tests
      run: |
        go test -v ./tests/integration/...

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push API Gateway
      uses: docker/build-push-action@v4
      with:
        context: ./services/api-gateway
        push: true
        tags: |
          ${{ env.API_GATEWAY_IMAGE }}:latest
          ${{ env.API_GATEWAY_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Investment Service
      uses: docker/build-push-action@v4
      with:
        context: ./services/investment-service
        push: true
        tags: |
          ${{ env.INVESTMENT_SERVICE_IMAGE }}:latest
          ${{ env.INVESTMENT_SERVICE_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Install Helm
      uses: azure/setup-helm@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Update kube config
      run: aws eks update-kubeconfig --name sparkfund-cluster --region us-east-1
        
    - name: Deploy to Kubernetes
      run: |
        # Update image tags in deployment files
        sed -i "s|${{ env.API_GATEWAY_IMAGE }}:.*|${{ env.API_GATEWAY_IMAGE }}:${{ github.sha }}|g" deploy/k8s/api-gateway.yaml
        sed -i "s|${{ env.INVESTMENT_SERVICE_IMAGE }}:.*|${{ env.INVESTMENT_SERVICE_IMAGE }}:${{ github.sha }}|g" deploy/k8s/investment-service.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f deploy/k8s/namespace.yaml
        kubectl apply -f deploy/k8s/database.yaml
        kubectl apply -f deploy/k8s/api-gateway.yaml
        kubectl apply -f deploy/k8s/investment-service.yaml
        kubectl apply -f deploy/k8s/monitoring.yaml
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/api-gateway -n sparkfund
        kubectl rollout status deployment/investment-service -n sparkfund
        kubectl get pods -n sparkfund
        
    - name: Run smoke tests
      run: |
        go test -v ./tests/smoke/...

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Send notification
      uses: actions/github-script@v6
      with:
        script: |
          const status = '${{ job.status }}';
          const message = `Pipeline ${status} for commit ${{ github.sha }}`;
          
          // Send to Slack
          const webhook = '${{ secrets.SLACK_WEBHOOK_URL }}';
          await fetch(webhook, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              text: message,
            }),
          }); 