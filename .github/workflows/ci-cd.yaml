name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: moneypulse
  EKS_CLUSTER_NAME: moneypulse-cluster

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Run tests
        run: go test ./... -v
        
      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [accounts, users, transactions, investments, loans]
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/${{ matrix.service }}-service:$IMAGE_TAG -f services/${{ matrix.service }}-service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY/${{ matrix.service }}-service:$IMAGE_TAG

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan
          
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  deploy-applications:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        
      - name: Deploy Helm charts
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add elastic https://helm.elastic.co
          helm repo update
          
          # Install monitoring stack
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace
          
          # Install ELK stack
          helm upgrade --install elasticsearch elastic/elasticsearch \
            --namespace logging --create-namespace
          helm upgrade --install kibana elastic/kibana \
            --namespace logging
          helm upgrade --install filebeat elastic/filebeat \
            --namespace logging
          
          # Install application services
          for service in accounts users transactions investments loans; do
            helm upgrade --install $service ./helm/$service \
              --namespace money-pulse --create-namespace \
              --set image.tag=${{ github.sha }}
          done

  deploy-ml-pipeline:
    needs: deploy-applications
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          pip install sagemaker boto3 pandas scikit-learn
          
      - name: Deploy ML models to SageMaker
        run: |
          python ml/deploy_models.py
          
      - name: Configure Glue jobs
        run: |
          aws glue create-job --name data-preprocessing \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GlueServiceRole \
            --command Name=glueetl,ScriptLocation=s3://moneypulse-ml/glue/preprocess.py \
            --default-arguments '{
              "--enable-continuous-cloudwatch-log": "true",
              "--enable-metrics": "true"
            }'
