openapi: 3.1.0
info:
  title: Users Service API
  version: 1.0.0
  description: API documentation for the Users Service of Money Pulse

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.moneypulse.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - firstName
        - lastName
        - status
        - createdAt
        - updatedAt

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
      required:
        - email
        - password
        - firstName
        - lastName

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
      required:
        - firstName
        - lastName

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token

paths:
  /api/v1/users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '409':
          description: User with email already exists
        '500':
          description: Internal server error

    get:
      summary: List users
      operationId: listUsers
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Maximum number of users to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of users to skip
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/v1/users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: User ID

    get:
      summary: Get user by ID
      operationId: getUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      summary: Update user
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '204':
          description: User updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

    delete:
      summary: Delete user
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/v1/users/{id}/status:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
      - in: query
        name: status
        required: true
        schema:
          type: string
          enum: [active, inactive, suspended]
        description: New user status

    patch:
      summary: Update user status
      operationId: updateUserStatus
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User status updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/v1/users/login:
    post:
      summary: Login user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error 