name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
      - name: Lint Go code
        uses: golangci/golangci-lint-action@v3
      - name: Lint Python code
        uses: chartboost/ruff-action@v1

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: true

  ml-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install ML dependencies
        run: pip install -r ml/requirements.txt
      - name: Run ML model tests
        run: python -m pytest ml/src/tests/

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs,config"
          severity: "CRITICAL,HIGH"
      - name: Run ML security checks
        run: |
          pip install safety
          safety check

  build:
    needs: [test, ml-tests, security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build and push ML models
        run: |
          docker build -f ml/Dockerfile \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ml:${{ github.sha }} \
            ml/
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ml:${{ github.sha }}
      - name: Build and push service
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EKS
        run: |
          helm upgrade --install kyc-service ./helm \
            --namespace sparkfund \
            --set image.tag=${{ github.sha }} \
            --set ml.image.tag=${{ github.sha }} \
            --set secrets.jwtSecret=${{ secrets.JWT_SECRET }} \
            --set secrets.mlApiKey=${{ secrets.ML_API_KEY }}
