apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: sparkfund
  labels:
    app: user-service
    version: stable
spec:
  replicas: 3
  selector:
    matchLabels:
      app: user-service
      version: stable
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: user-service
        version: stable
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: user-service
        image: sparkfund/user-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8084
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        env:
        - name: APP_ENV
          value: "production"
        - name: APP_DATABASE_HOST
          value: "postgres"
        - name: APP_DATABASE_PORT
          value: "5432"
        - name: APP_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: user-service-db-credentials
              key: username
        - name: APP_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: user-service-db-credentials
              key: password
        - name: APP_DATABASE_NAME
          value: "user_service"
        - name: APP_DATABASE_SSLMODE
          value: "require"
        - name: APP_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: user-service-jwt
              key: secret
        - name: APP_REDIS_HOST
          value: "redis"
        - name: APP_REDIS_PORT
          value: "6379"
        - name: APP_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: user-service-redis
              key: password
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: user-service-config
      - name: tmp-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - user-service
              topologyKey: kubernetes.io/hostname
