version: "3.8"

services:
  # API Gateway - Entry point for all services
  api-gateway:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./services/api-gateway/nginx.conf:/etc/nginx/conf.d/default.conf
    environment:
      - KYC_SERVICE_URL=http://kyc-service:8081
      - INVESTMENT_SERVICE_URL=http://investment-service:8080
      - USER_SERVICE_URL=http://user-service:8084
      - AI_SERVICE_URL=http://ai-service:8000
    depends_on:
      - kyc-service
      - investment-service
      - user-service
      - ai-service
    networks:
      - sparkfund-network

  # KYC Service - Know Your Customer functionality
  kyc-service:
    image: golang:1.23-alpine
    working_dir: /app
    volumes:
      - ./services/kyc-service:/app
    command: >
      sh -c "
        apk add --no-cache git make curl &&
        go get github.com/gorilla/mux &&
        cp -r docs/* . &&
        go run simple_swagger_main.go
      "
    ports:
      - "8081:8081"
    environment:
      - ENV=development
      - PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=kyc_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AI_SERVICE_URL=http://ai-service:8000
    depends_on:
      - postgres
      - redis
    networks:
      - sparkfund-network

  # Investment Service - Investment management
  investment-service:
    image: golang:1.22-alpine
    working_dir: /app
    volumes:
      - ./services/investment-service:/app
    command: >
      sh -c "
        apk add --no-cache git make curl &&
        go get github.com/gorilla/mux &&
        cp -r docs/* . &&
        go run simple_swagger_main.go
      "
    ports:
      - "8082:8080"
    environment:
      - APP_ENV=development
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=investment_service
      - DB_SSL_MODE=disable
      - JWT_SECRET=your-jwt-secret
    depends_on:
      - postgres
    networks:
      - sparkfund-network

  # User Service - User management
  user-service:
    image: golang:1.23-alpine
    working_dir: /app
    volumes:
      - ./services/user-service:/app
    command: >
      sh -c "
        apk add --no-cache git make curl &&
        go get github.com/gorilla/mux &&
        cp -r docs/* . &&
        go run simple_swagger_main.go
      "
    ports:
      - "8083:8084"
    environment:
      - APP_ENV=development
      - PORT=8084
      - APP_DATABASE_HOST=postgres
      - APP_DATABASE_PORT=5432
      - APP_DATABASE_USER=postgres
      - APP_DATABASE_PASSWORD=postgres
      - APP_DATABASE_NAME=user_service
      - APP_DATABASE_SSLMODE=disable
      - APP_JWT_SECRET=your-jwt-secret
    depends_on:
      - postgres
    networks:
      - sparkfund-network

  # AI Service - AI-powered document verification and analysis
  ai-service:
    image: python:3.9-slim
    working_dir: /app
    volumes:
      - ./services/ai-service:/app
      - ai_uploads:/app/uploads
      - ai_models:/app/models
    command: >
      sh -c "
        pip install -r requirements.txt &&
        mkdir -p uploads models &&
        python app.py
      "
    ports:
      - "8001:8000"
    environment:
      - DEBUG=True
      - HOST=0.0.0.0
      - PORT=8000
      - API_KEY=your-api-key
      - MODEL_PATH=/app/models
      - UPLOAD_DIR=/app/uploads
    networks:
      - sparkfund-network

  # PostgreSQL - Primary database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sparkfund
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sparkfund-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Caching and session management
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sparkfund-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - sparkfund-network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - sparkfund-network
    depends_on:
      - prometheus

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
    networks:
      - sparkfund-network

networks:
  sparkfund-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  ai_uploads:
  ai_models:
  prometheus-data:
  grafana-data:
